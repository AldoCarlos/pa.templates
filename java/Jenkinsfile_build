pipeline {
    agent { label 'docker' }
    tools {
        maven 'Maven 3.3.9'
        jdk 'openjdk-11'
    }
    environment {
        REGISTRY_ADDRESS = "harbor001.pro.intra.rs.gov.br"
        REGISTRY_AUTH = credentials("harbor001")
        PROJECT_NAME = "APM-JAVA-API"
    }
    parameters {
        choice(name: 'AMBIENTE', choices: ['des', 'tes', 'tef', 'hml', 'tre', 'pro'], description: 'Ambiente do liquibase para validação de sintaxe')
        string(name: 'BRANCH_NAME', defaultValue: '', description: 'Branch do repositorio Git')
        string(name: 'NAMESPACE_IMAGEM', defaultValue: 'sra', description: 'Namespace da imagem no Harbor')
        string(name: 'VERSAO', defaultValue: 'latest', description: 'Versão da imagem')
        booleanParam(name: 'SKIP_QUALITY_GATES', defaultValue: false, description: 'Pula etapa de Quality Gates')
    }
    stages {
        stage('Build') {
            steps {
                script {
                    FAILED_STAGE = STAGE_NAME
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    FAILED_STAGE = STAGE_NAME
                    sh 'mvn verify -Pcoverage'
                }
            }
        }

        stage('Liquibase Syntax') {
            when {
                expression { isBranchDevelop() }
            }
            steps {
                script {
                    FAILED_STAGE = STAGE_NAME
                    sh "mvn liquibase:updateSQL -Dliquibase.contextName=${params.AMBIENTE} -Pliquibase-update"
                }
            }
        }

        stage('Sonar') {
            steps {
                script {
                    FAILED_STAGE = STAGE_NAME
                    withSonarQubeEnv('sonar_empresa') {
                        def pom = readMavenPom file: 'pom.xml'
                        def projectName = getSonarProjectName(pom.artifactId)
                        def projectKey = "${pom.groupId}:${projectName}"
                        sh "mvn sonar:sonar -Dsonar.projectName=${projectName} -Dsonar.projectKey=${projectKey}"
                    }
                }
            }
        }

        stage('Quality Gates') {
            when {
                expression { !params.SKIP_QUALITY_GATES }
            }
            steps {
                script {
                    FAILED_STAGE = STAGE_NAME
                    timeout(time: 5, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        stage('Build/Push Docker Image') {
            when {
                expression { isRelease() }
            }
            steps {
                script {
                    FAILED_STAGE = STAGE_NAME
                    sh "docker login -u=${REGISTRY_AUTH_USR} -p=${REGISTRY_AUTH_PSW} ${REGISTRY_ADDRESS}"

                    def REGISTRY_PATH = "${REGISTRY_ADDRESS}/${params.NAMESPACE_IMAGEM}"
                    sh "docker build " +
                            "-t apm_backend_apm-java-api:latest " +
                            "-t ${REGISTRY_PATH}/apm-java-api:${params.VERSAO} " +
                            "-t ${REGISTRY_PATH}/apm-java-api:latest ."

                    sh "docker push ${REGISTRY_PATH}/apm-java-api:${params.VERSAO}"
                }
            }
        }
    }
}


def isBranchMaster() {
    params.BRANCH_NAME ==~ /(origin|refs\/heads)\/master/
}

def isBranchDevelop() {
    params.BRANCH_NAME ==~ /(origin|refs\/heads)\/develop/
}

def isBranchHomolog() {
    params.BRANCH_NAME ==~ /(origin|refs\/heads)\/homolog/
}

def isBranchHotfix() {
    params.BRANCH_NAME ==~ /(origin|refs\/heads)\/hotfix\/.*/
}

def isBranchTag() {
    params.BRANCH_NAME ==~ /refs\/tags\/.*/
}

def isRelease() {
    isBranchMaster() || isBranchDevelop() || isBranchHomolog() || isBranchHotfix() || isBranchTag()
}

def getSonarProjectName(artifactId) {
    if (isBranchMaster()) {
        return artifactId
    }
    if (isBranchDevelop()) {
        return artifactId + "-develop"
    }
    return artifactId + "-pr"
}
